Notes for commands of NS3
http://www.nsnam.org/docs/release/3.14/tutorial/singlehtml/index.html#id1


build ns3 project with waf
  ./waf clean
  ./waf -d optimized --enable-examples --enable-tests configure
  OR
  ./waf -d debug --enable-examples --enable-tests configure
  
  run ./waf --help for more 
  
  it is possible to specify that waf builds the project in a 
  directory different than the default build/ directory by passing the -o option to configure; 
  e.g.
    ./waf -d debug -o build/debug --enable-examples --enable-tests configure
    
Running a script
  ./waf --run hello-simulator
  If you don’t see waf messages indicating that the build was completed successfully, 
  but do not see the “Hello Simulator” output, chances are that you have switched your 
  build mode to “optimized” in the “Building with Waf” section, but have missed the change
  back to “debug” mode. All of the console output used in this tutorial uses a special ns-3 
  logging component that is useful for printing user messages to the console. Output from 
  this component is automatically disabled when you compile optimized code –
  it is “optimized out.” If you don’t see the “Hello Simulator” output, type the following,
    ./waf -d debug --enable-examples --enable-tests configure
    THEN
    ./waf
    
    
Conceptual Overview
  Node: 
    You can add things like applications, protocol stacks, peripheral cards with their associted drivers
  Application: 
  Channel:
    class provides methods for managing communication subnetwork objects and connecting nodes to them
    ex:
      CsmaChannel, PointToPointChannel, WifiChannel
  NetDevice:
    In ns-3 the net device abstraction covers both the software driver and the simulated hardware
    A net device is “installed” in a Node in order to enable the Node to communicate with other 
    Nodes in the simulation via Channels
    The NetDevice class provides methods for managing connections to Node and Channel objects
    
    ust as an Ethernet NIC is designed to work with an Ethernet network,
      the CsmaNetDevice is designed to work with a CsmaChannel;
      PointToPointNetDevice is designed to work with a PointToPointChannel
      WifiNetNevice is designed to work with a WifiChannel.
      
      
Topology Helpers      

  NodeContainer
    NodeContainer nodes;
    nodes.Create (2);
  PointToPointHelper
    PointToPointHelper pointToPoint;
    pointToPoint.SetDeviceAttribute ("DataRate", StringValue ("5Mbps"));
    pointToPoint.SetChannelAttribute ("Delay", StringValue ("2ms"));
  NetDeviceContainer :  return a list of all of the NetDevice objects that are created
    NetDeviceContainer devices;
    devices = pointToPoint.Install (nodes);
  # We now have nodes and devices configured, but we don’t have any protocol stacks installed on our node
  InternetStackHelper
    InternetStackHelper stack;
    stack.Install (nodes); # it will install an Internet Stack
          (TCP, UDP, IP, etc.) on each of the nodes in the node container.
  Ipv4AddressHelper
    Ipv4AddressHelper address;
    address.SetBase ("10.1.1.0", "255.255.255.0");
    # next line performs the actual address assignment.
    Ipv4InterfaceContainer interfaces = address.Assign (devices);
    
  # Now we have a point-to-point network built, with stacks installed and IP addresses assigned. 
  What we need at this point are applications to generate traffic. 
  
  Applications
    UdpEchoServerHelper
      UdpEchoServerHelper echoServer (9);
      ApplicationContainer serverApps = echoServer.Install (nodes.Get (1));
      serverApps.Start (Seconds (1.0));
      serverApps.Stop (Seconds (10.0));
      
    UdpEchoClientHelper
      UdpEchoClientHelper echoClient (interfaces.GetAddress (1), 9);
      echoClient.SetAttribute ("MaxPackets", UintegerValue (1));
      echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.)));
      echoClient.SetAttribute ("PacketSize", UintegerValue (1024));

      ApplicationContainer clientApps = echoClient.Install (nodes.Get (0));
      clientApps.Start (Seconds (2.0));
      clientApps.Stop (Seconds (10.0));
    
  Simulator
    Simulator::Run ();
    Simulator::Destroy ();
 

Building Your script
  All you have to do is to drop your script into the scratch directory and
  it will automatically be built if you run Waf.
  
  cp examples/tutorial/first.cc scratch/myfirst.cc  
  ./waf
  
  Now you can run the examples
  ./waf --run scratch/myfirst --vis
  
 
Enabling Logging
  LogComponentEnable("UdpEchoClientApplication", LOG_LEVEL_INFO);
  
  We can increase the logging level and get more information without
  changing the script and recompiling by setting the NS_LOG environment variable like this:

  export NS_LOG=UdpEchoClientApplication=level_all
  
  
Using Command Line Arguments
  
  CommandLine cmd;
  cmd.Parse (argc, argv);
  
  ./waf --run "scratch/first --PrintHelp" 
  # The quotes are required to sort out which program gets which argument
  
  ./waf --run "scratch/myfirst --PrintAttributes=ns3::PointToPointNetDevice"
  # The system will print out all of the Attributes of this kind of net device. 
  # Among the Attributes you will see listed is,
  
  ./waf --run "scratch/first --PrintAttributes=ns3::PointToPointNetDevice"
  # The system will print out all of the Attributes of this kind of net device "PointToPointNetDevice"
  
  ./waf --run "scratch/first --ns3::PointToPointNetDevice::DataRate=5Mbps"
  # This will set the default value of the DataRate Attribute back to five megabits per second
  
  # We can then set both of these default values through the command line system,
  ./waf --run "scratch/myfirst
    --ns3::PointToPointNetDevice::DataRate=5Mbps
    --ns3::PointToPointChannel::Delay=2ms
    --ns3::UdpEchoClient::MaxPackets=2"
  
Hooking Your Own Values
  
  uint32_t nPackets = 1;

  CommandLine cmd;
  cmd.AddValue("nPackets", "Number of packets to echo", nPackets);
  cmd.Parse (argc, argv);
  ...
  echoClient.SetAttribute ("MaxPackets", UintegerValue (nPackets));
  
  then run
  ./waf --run "scratch/first --nPackets=2"
  
Using the Tracing System
  ASCII Tracing
    # add following at the end file before start,
    AsciiTraceHelper ascii;
    pointToPoint.EnableAsciiAll (ascii.CreateFileStream ("myfirst.tr"));
  
    Parsing Ascii Traces( myfirst.tr file)
      +: An enqueue operation occurred on the device queue;
      -: A dequeue operation occurred on the device queue;
      d: A packet was dropped, typically because the queue was full;
      r: A packet was received by the net device.
    
  PCAP Tracing
    <name>-<node>-<device>.pcap
    pointToPoint.EnablePcapAll ("myfirst");
    #  Notice that we only passed the string “myfirst,” and not “myfirst.pcap”
    # eventually see files named “myfirst-0-0.pcap” and “myfirst-1-0.pcap” 
    # which are the pcap traces for "node 0-device 0" and "node 1-device 0", respectively.
    
    Reading output with tcpdump
      tcpdump -nn -tt -r myfirst-0-0.pcap
      tcpdump -nn -tt -r myfirst-1-0.pcap
      
    Reading output with Wireshark
    
    
Building Topologies
  
    
Building a Wireless Network Topology   
  #include "ns3/core-module.h"
  #include "ns3/point-to-point-module.h"
  #include "ns3/network-module.h"
  #include "ns3/applications-module.h"
  #include "ns3/wifi-module.h"
  #include "ns3/mobility-module.h"
  #include "ns3/csma-module.h"
  #include "ns3/internet-module.h"
  
  # setup the wifi channel:

  YansWifiChannelHelper channel = YansWifiChannelHelper::Default ();
  YansWifiPhyHelper phy = YansWifiPhyHelper::Default () 
  phy.SetChannel (channel.Create ())
  
  # Once the PHY helper is configured, we can focus on the MAC layer
  WifiHelper wifi = WifiHelper::Default ();
  wifi.SetRemoteStationManager ("ns3::AarfWifiManager");
  NqosWifiMacHelper mac = NqosWifiMacHelper::Default ();
  
  # Next, we configure the type of MAC, the SSID of the infrastructure network we want to 
  # setup and make sure that our stations don’t perform active probing:
  Ssid ssid = Ssid ("ns-3-ssid");
  mac.SetType ("ns3::StaWifiMac",
  "Ssid", SsidValue (ssid),
  "ActiveProbing", BooleanValue (false));
  
  #  create adhoc devices on this channel:

  NetDeviceContainer staDevices;
  staDevices = wifi.Install (phy, mac, wifiStaNodes);
  mac.SetType ("ns3::ApWifiMac",
             "Ssid", SsidValue (ssid));
             
  # The next lines create the single AP which shares the same set of PHY-level Attributes 
  # (and channel) as the stations:
  NetDeviceContainer apDevices;
  apDevices = wifi.Install (phy, mac, wifiApNode);
  
  # Now, we are going to add mobility models.
  MobilityHelper mobility;

  mobility.SetPositionAllocator ("ns3::GridPositionAllocator",
    "MinX", DoubleValue (0.0),
    "MinY", DoubleValue (0.0),
    "DeltaX", DoubleValue (5.0),
    "DeltaY", DoubleValue (10.0),
    "GridWidth", UintegerValue (3),
    "LayoutType", StringValue ("RowFirst"));
  
  # We have arranged our nodes on an initial grid, but now we need to tell them how to move. 
  mobility.SetMobilityModel ("ns3::RandomWalk2dMobilityModel",
  "Bounds", RectangleValue (Rectangle (-50, 50, -50, 50)));
  
  # We now tell the MobilityHelper to install the mobility models on the STA nodes
  mobility.Install (wifiStaNodes);
  
  # We want the access point to remain in a fixed position during the simulation.
  mobility.SetMobilityModel ("ns3::ConstantPositionMobilityModel");
  mobility.Install (wifiApNode);

  # We now have our nodes, devices and channels created, and mobility models chosen for the Wifi nodes,
  # but we have no protocol stacks present. 
  # Just as we have done previously many times, we will use the InternetStackHelper to install these stack
  InternetStackHelper stack;
  stack.Install (csmaNodes);
  stack.Install (wifiApNode);
  stack.Install (wifiStaNodes);

  Ipv4AddressHelper address;

  address.SetBase ("10.1.1.0", "255.255.255.0");
  Ipv4InterfaceContainer p2pInterfaces;
  p2pInterfaces = address.Assign (p2pDevices);
  
  address.SetBase ("10.1.2.0", "255.255.255.0");
  Ipv4InterfaceContainer csmaInterfaces;
  csmaInterfaces = address.Assign (csmaDevices);
  
  address.SetBase ("10.1.3.0", "255.255.255.0");
  address.Assign (staDevices);
  address.Assign (apDevices);
  
  UdpEchoServerHelper echoServer (9);

  ApplicationContainer serverApps = echoServer.Install (csmaNodes.Get (nCsma));
  serverApps.Start (Seconds (1.0));
  
  
  UdpEchoClientHelper echoClient (csmaInterfaces.GetAddress (nCsma), 9);
  echoClient.SetAttribute ("MaxPackets", UintegerValue (1));
  echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.)));
  echoClient.SetAttribute ("PacketSize", UintegerValue (1024));
  
  ApplicationContainer clientApps =
    echoClient.Install (wifiStaNodes.Get (nWifi - 1));
  clientApps.Start (Seconds (2.0));
  clientApps.Stop (Seconds (10.0));
  
  
  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();
  
  # We create just enough tracing to cover all three networks:
  
  pointToPoint.EnablePcapAll ("third");
  phy.EnablePcap ("third", apDevices.Get (0));
  csma.EnablePcap ("third", csmaDevices.Get (0), true)
    serverApps.Stop (Seconds (10.0))
  
Example containers:
  NodeContainer
  NetDeviceContainer
  Ipv4AddressContainer
Example helper classes:
  InternetStackHelper
  WifiHelper
  MobilityHelper
  OlsrHelper
  etc. Each model provides a helper class
  


